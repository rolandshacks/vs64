
; ******** Source: c:\Work\vs64\example\src\main.asm
     1                          ;
     2                          ; C64 Demo
     3                          ;

; ******** Source: libmacro64.asm
     1                          ;
     2                          ; C64 Macro Library
     3                          ;
     4                          
     5                          ; -------------------------------------------------
     6                          ; Program Startup
     7                          ; -------------------------------------------------
     8                          
     9                          ;
    10                          ; Generate startup BASIC code line (1973 SYS xxxx)
    11                          ;
    12                          !macro __startup_basic_code {
    13                              !word +, 1973                               ; basic line
    14                              !byte $9e                                   ; 'SYS' command
    15                              !byte $20                                   ; space character
    16                              !byte $30+((+ +2)/1000)%10                  ; address digit
    17                              !byte $30+((+ +2)/100)%10                   ; address digit
    18                              !byte $30+((+ +2)/10)%10                    ; address digit
    19                              !byte $30+(+ +2)%10                         ; address digit
    20                              !byte $0                                    ; end of basic line
    21                          +   !word $0                                    ; end of basic program
    22                          }
    23                          
    24                          !macro std_startup .load_address, .jump_address {
    25                              *=.load_address                              ; set load address
    26                              +__startup_basic_code                       ; basic startup line
    27                              jmp .jump_address                           ; jump to label
    28                          }
    29                          
    30                          !macro std_startup .load_address {
    31                              *=.load_address                              ; set load address
    32                              +__startup_basic_code                       ; basic startup line
    33                          }
    34                          
    35                          !macro std_startup {
    36                              +__startup_basic_code                        ; basic startup line
    37                          }
    38                          
    39                          ; -------------------------------------------------
    40                          ; System
    41                          ; -------------------------------------------------
    42                          
    43                          !macro std_disable_interrupts {
    44                              sei
    45                          }
    46                          
    47                          !macro std_enable_interrupts {
    48                              cli
    49                          }
    50                          
    51                          !macro std_configure_memory .flags {
    52                              lda $01
    53                              and #$f8
    54                              ora #.flags
    55                          }
    56                          
    57                          !macro poke .addr, .value {
    58                              lda #.value
    59                              sta .addr
    60                          }

; ******** Source: c:\Work\vs64\example\src\main.asm
     4                          
     5                          
     6  0801 0c08b5079e203230...+std_startup $0801, main
     7                          
     8                          ; declaring variables
     9  0811 0000               .counter        !16 $0000   ; repeat counter
    10  0813 00                 .char_counter   !08 $00     ; character output counter
    11  0814 00                 .mask           !08 $00
    12  0815 00                 .running        !08 $0
    13                          
    14                          
    15                          ; -------------------------------------------------
    16                          ; waste some cycles
    17                          ; -------------------------------------------------
    18                          !macro do_nothing {
    19                              pha
    20                              lda #$0
    21                              lda #$1
    22                              lda #$2
    23                              lda #$3
    24                              lda #$4
    25                              pla
    26                          }
    27                          
    28                          ; -------------------------------------------------
    29                          ; main
    30                          ; -------------------------------------------------
    31                          
    32                          main
    33  0816 a901                   lda #$1
    34  0818 203308                 jsr init
    35  081b a902                   lda #$2
    36  081d 48a900a901a902a9...    +do_nothing
    37  0829 a903                   lda #$3
    38  082b a904                   lda #$4
    39  082d 203808                 jsr run
    40  0830 a905                   lda #$5
    41  0832 60                     rts
    42                          
    43                          ; -------------------------------------------------
    44                          ; init
    45                          ; -------------------------------------------------
    46                          
    47                          init
    48                              ;jsr std_disable_kernal_and_basic
    49  0833 a906                   lda #$6
    50  0835 a907                   lda #$7
    51  0837 60                     rts
    52                          
    53                          ; -------------------------------------------------
    54                          ; run
    55                          ; -------------------------------------------------
    56                          
    57                          run
    58  0838 48                     pha
    59  0839 8a                     txa
    60  083a 48                     pha
    61  083b a203                   ldx #3
    62                          
    63                          runloop
    64  083d a901                   lda #1
    65  083f a902                   lda #2
    66  0841 a903                   lda #3
    67  0843 ca                     dex
    68  0844 d0f7                   bne runloop
    69                          
    70                          runend
    71  0846 68                     pla
    72  0847 aa                     tax
    73  0848 68                     pla
    74  0849 60                     rts
    75                          
    76                          ; -------------------------------------------------
    77                          ; application data
    78                          ; -------------------------------------------------
    79                          
    80                          .statebuffer
    81  084a 0000000000000000...    !fill 32, $0           ; reserve 32 bytes buffer
    82                          
    83                          ; -------------------------------------------------
    84                          ; libraries
    85                          ; -------------------------------------------------
    86                          

; ******** Source: libstd64.asm
     1                          ;
     2                          ; C64 Standard Library
     3                          ;
     4                          
     5                          std_disable_kernal_and_basic
     6                          
     7  086a 78                     +std_disable_interrupts
     8                          
     9  086b a97f8d0ddc             +poke $dc0d, $7f
    10  0870 a97f8d0ddd             +poke $dd0d, $7f
    11                          
    12  0875 ad0ddc                 lda $dc0d
    13  0878 ad0ddd                 lda $dd0d
    14                          
    15  087b a9008d1ad0             +poke $d01a, $0
    16  0880 a9008d19d0             +poke $d019, $0
    17                          
    18  0885 a50129f80905           +std_configure_memory $5
    19                          
    20  088b 58                     +std_enable_interrupts
    21                          
    22  088c 60                     rts
    23                          
    24                          
    25                          std_copy_charset
    26  088d 78                     +std_disable_interrupts
    27                          
    28  088e a501                   lda $01
    29                          
    30  0890 58                     +std_enable_interrupts
    31  0891 60                     rts

; ******** Source: c:\Work\vs64\example\src\main.asm
    87                          
